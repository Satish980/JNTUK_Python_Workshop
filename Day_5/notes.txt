
***** Everything in python is object ******
**** Every object contains set of methods *****

comments
-----------
single line comment ( # )
multiline comment   

'''
these lines are 
commented

'''


objects in python
----------------

number
------
number can be integer or decimal or octal or hexa.

val = 10
aval = 4.434


string
-----
string can be defined in single or double or triple quotes.

aname = 'python programming'
bname = "spark programming"
cname = """machine learning"""

list  ( array in C ) ( MUTABLE )
-----
-list contains set of elements.
-Elements can be set of numbers or strings or any combination.
-list elements are defined in [].


alist = [10,20,30,40]
blist = ["oracle","microsoft","unix"]
clist = [10,20,"oracle"]

tuple  ( READ ONLY , IMMUTABLE )
-------
****** elements inside tuple cannot be modified DIRECTLY********
-tuple contains set of elements
-Elements can be set of numbers or strings or any combination.
-tuple elements are defined in ().


atup = (34,3,43,43)
btup = ("scala","hadoop","oracle")
ctup = (40,"java",45.3,"oracle")




dictionary ( hash, map)
-----------------------
-dictionary contains elements in key:value items
-dictionary elements are defined in {}.
**** There are no such concept of indexing in dictionary ****
In dictionary, keys are always UNIQUE.
In dictionary , key can be number or string to uniquely identify
                value can be number or string or list or tuple or dictionary

syntax:     object = { key:value , key:value , key:value }
example     book  = {"chap1":10 ,"chap2":20 ,"chap3":30 ,"chap1":1000}
            data  = {1:2,3:4,5:6}
            output = {"chap1":[10,"UK","Rose"]  , "chap2":[40,"US","Rita"] , "chap3":[50,"AUS","Gita"] }



set
----
set is Unordered collection of UNIQUE elements of same type.
        --------               -------             ---------

- set elements are defined in {}.






classification of objects
----------------------------


mutable
---------
list
dictionary
set

immutable
-----------
number   
string
tuple


methods & functions
--------------------


methods: methods are object specific.
         string methods are differen to list methods

functions: functions are common for all the objects



builtin functions
--------------------
print()
input()
max()
min()
sum()
isinstaance()
type()
help()
dir()
map()
filter()
id()


conversion functions  ( typecasting )
---------------------
int()
float()
str()
oct()
list()
tuple()
dict()
set()

How to display all the builtin functions ?
------------------------------------------------
In console

dir(__builtins__)


statements
-----------


conditional statements
--------------------
if
if-else
if-elif-elif...else



control statements
-------------------
while
for


jump statements
-----------
break
continue



level1
level1
level1
if cond:
     level2
     level2
     level2
     level2
level1
level1

level1
level1
level1
if cond:
     level2
     if cond:
	level3
	level3
     else:
	level3
	level3
level1
level1


operators
---------

arithmetic operators : + - *  / %

relational operators : <  >  <=  >=  ==  !=

assignment operator (++ and -- are NOT allowed in python )   
-----------------------------
val = 1
val+=1  or  val = val +1
val-=1  or  val = val -1

logical operators
-----------------
and  
or
not

name = "UNIX"
if  len(name) == 4  and name.isupper():
	# only if both the conditions are True


special operators
-------------------
in
as



user defined functions
---------------------



fixed arguments


default arguments

variable length arguments


*  and **	




local & global
-------------------
If any object is defined outside the function ... it is global object
If any object is defined inside the function .... it is local object







file handling
---------------

working with flat files ( log conf csv txt .... )
----------------------

opening the file
---------------
syntax:    object = open(filename,mode)
example:     fobj = open("customers.txt","r")
             case1 : if the file is existing .. we can read the file
             case2 : if the file is not existing.. it will throw error 'FileNotFoundError'
         
             fobj = open("customers.txt","w")
             case1 : If the file is existing ... it overwrites the content
             case2 : If hte file is not existing.. it creates a file     


             fobj = open("customers.txt","a")
             case1 : If the file is existing ... it appends the data to the file
             case2 : If hte file is not existing.. it creates a file     
            

closing the file
------------------
fobj.close()


read operation
---------------
- reading the file line by line
- fobj.readlines()
- fobj.read()
- csv library
- pandas library








working with third part files ( xlsx xls ppt pptx pdf .... )
-----------------------------





exception handling
---------------------
Basically we have 2 types of errors :

-synntax error
-semantic error or runtime error

Handling errors|exceptions in the runtime is known as exception handling


try
except
else
finally
raise
































  












